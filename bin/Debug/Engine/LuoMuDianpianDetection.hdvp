<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="17.12">
<procedure name="LuoMuDianpianDetection">
<interface>
<io>
<par name="R" base_type="iconic" dimension="0"/>
<par name="ROI_LuoMuDiePian_T" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Result_Region" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="minThreshold" base_type="ctrl" dimension="0"/>
<par name="filterRadiu" base_type="ctrl" dimension="0"/>
<par name="minAreaThreshold" base_type="ctrl" dimension="0"/>
<par name="luoMuMaxArea" base_type="ctrl" dimension="0"/>
<par name="luoMuWidth" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="luoMuDiePian_OKNG" base_type="ctrl" dimension="0"/>
<par name="lM_DP_Num" base_type="ctrl" dimension="0"/>
<par name="lM_DP_Area" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>lM_DP_Num:=0</l>
<l>lM_DP_Area:=0</l>
<l>luoMuDiePian_OKNG := 0</l>
<c>*</c>
<l>gen_empty_region (Result_Region)</l>
<l>reduce_domain (R, ROI_LuoMuDiePian_T, ImageReduced_LuoMuDiePian)</l>
<l>threshold (ImageReduced_LuoMuDiePian, LuoMuDiePian, minThreshold, 255)</l>
<l>closing_circle (LuoMuDiePian, Opening_Region, filterRadiu)</l>
<l>connection (Opening_Region, temp_region)</l>
<l>area_center (temp_region, Area, Row, Column)</l>
<l>mask:=Area[&gt;=]minAreaThreshold</l>
<l>select_mask_obj (temp_region, Result_Region, mask)</l>
<l>count_obj (Result_Region, lM_DP_Num)</l>
<c></c>
<l>lM_DP_Area:=max(Area)</l>
<l>if(lM_DP_Num&gt;=4 or (lM_DP_Area&gt;(minAreaThreshold+luoMuMaxArea) and lM_DP_Num==3))</l>
<l>    luoMuDiePian_OKNG := 1</l>
<l>elseif(lM_DP_Num==2 and lM_DP_Area&gt;luoMuMaxArea)</l>
<l>    connection (ROI_LuoMuDiePian_T, mes_regions)</l>
<l>    count_obj (mes_regions, Number)</l>
<l>    get_image_size (ImageReduced_LuoMuDiePian, Width, Height)</l>
<l>    if(Number#2)</l>
<l>        luoMuDiePian_OKNG := 0</l>
<l>        return ()</l>
<l>    endif</l>
<l>    Rows1:=[]</l>
<l>    Cols1:=[]</l>
<l>    Rows2:=[]</l>
<l>    Cols2:=[]</l>
<l>    Dist:=[]  </l>
<l>    for index:=1 to 2 by 1</l>
<l>        select_obj (mes_regions, ObjectSelected, index)</l>
<l>        smallest_rectangle2 (ObjectSelected, Row1, Column1, Phi, Length1, Length2)</l>
<l>        gen_measure_rectangle2 (Row1, Column1, Phi, Length1, Length2/4, Width, Height, 'nearest_neighbor', MeasureHandle)        </l>
<l>        measure_pos (R, MeasureHandle, 1, 35, 'all', 'first', RowEdge1, ColumnEdge1, Amplitude1, Distance1)</l>
<l>        measure_pos (R, MeasureHandle, 1, 35, 'all', 'last', RowEdge2, ColumnEdge2, Amplitude2, Distance2)</l>
<l>        close_measure (MeasureHandle)</l>
<l>        tuple_length (RowEdge1, L1)</l>
<l>        tuple_length (RowEdge2, L2)</l>
<l>        if(L1#1 or L2#1)</l>
<l>            continue</l>
<l>        endif</l>
<l>        Rows1:=[Rows1,RowEdge1]</l>
<l>        Cols1:=[Cols1,ColumnEdge1]</l>
<l>        Rows2:=[Rows2,RowEdge2]</l>
<l>        Cols2:=[Cols2,ColumnEdge2]</l>
<l>        distance_pp (RowEdge1, ColumnEdge1, RowEdge2, ColumnEdge2, Distance)</l>
<l>        Dist:=[Dist,Distance]</l>
<l>    endfor</l>
<l>    tuple_length (Dist, Length)</l>
<l>    if(Length # 2)</l>
<l>        luoMuDiePian_OKNG := 0</l>
<l>        return ()</l>
<l>    endif</l>
<l>    if(Dist[0]&gt; luoMuWidth and Dist[1]&gt;luoMuWidth)</l>
<l>        luoMuDiePian_OKNG :=1</l>
<l>    else</l>
<l>        luoMuDiePian_OKNG :=0</l>
<l>    endif</l>
<c>    </c>
<l>else</l>
<l>    luoMuDiePian_OKNG := 0</l>
<l>endif</l>
<c></c>
<l>return ()</l>
<c></c>
</body>
<docu id="LuoMuDianpianDetection">
<parameters>
<parameter id="R"/>
<parameter id="ROI_LuoMuDiePian_T"/>
<parameter id="Result_Region"/>
<parameter id="filterRadiu"/>
<parameter id="lM_DP_Area"/>
<parameter id="lM_DP_Num"/>
<parameter id="luoMuDiePian_OKNG"/>
<parameter id="luoMuMaxArea"/>
<parameter id="luoMuWidth"/>
<parameter id="minAreaThreshold"/>
<parameter id="minThreshold"/>
</parameters>
</docu>
</procedure>
</hdevelop>
